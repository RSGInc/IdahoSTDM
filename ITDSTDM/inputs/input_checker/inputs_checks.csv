Test,Test_Group,Input_Table,Input_ID_Column,Severity,Type,Expression,Test_Vals,Report_Statistic,Test_Description
# Group 1: Model Setup Checks,,,,,,,,,
Environ_vars,1,None,,Fatal,Test,test_val in __import__('os').environ,"MODEL_YEAR,INPUT_FOLDER,OUTPUT_FOLDER,MAX_ITER,ASSIGN_ITER",,Check if environment variables are set
Model_Year_old,1,None,,Warning,Test,int(__import__('os').environ['MODEL_YEAR']) > 2010,,,Warning if model year too old (before 2010)
Maximum_iters,1,None,,Fatal,Test,int(__import__('os').environ['MAX_ITER']) > 0,,,Maximum Iterations set to 0
Assign_iters_zero,1,None,,Fatal,Test,int(__import__('os').environ['ASSIGN_ITER']) > 0,,,Maximum Iterations set to 0
Assign_iters_low,1,None,,Warning,Test,int(__import__('os').environ['ASSIGN_ITER']) >= 100,,,Maximum Iterations set low (below 100)
# Group 2: Pre-Populationsim Checks,,,,,,,,,
#All TAZs in net are in TAZ input file
TAZ_HH_by_size,2,taz_in,,Logical,Test,"all(taz_in['TOTHH_T'] == taz_in[['HHSIZE1', 'HHSIZE2', 'HHSIZE3', 'HHSIZE4', 'HHSIZE5', 'HHSIZE6', 'HHSIZE7']].sum(1))",,,Total HHs = HH by size
TAZ_HH_by_worker,2,taz_in,,Logical,Test,"all(taz_in['TOTHH_T'] == taz_in[['HHWORK0', 'HHWORK1', 'HHWORK2', 'HHWORK3']].sum(1))",,,Total HHs = HH by workers
TAZ_HH_wrk1_share,2,taz_in,,Logical,Test,"all((taz_in['HHWORK1'] / taz_in['TOTHH_T']).fillna(0) <= (taz_in[['HHSIZE1', 'HHSIZE2', 'HHSIZE3', 'HHSIZE4', 'HHSIZE5', 'HHSIZE6', 'HHSIZE7']].sum(1) / taz_in['TOTHH_T']).fillna(0))",,,Share of 1-worker HHs compared to share of HHs by size
TAZ_HH_wrk2_share,2,taz_in,,Logical,Test,"all((taz_in['HHWORK2'] / taz_in['TOTHH_T']).fillna(0) <= (taz_in[['HHSIZE2', 'HHSIZE3', 'HHSIZE4', 'HHSIZE5', 'HHSIZE6', 'HHSIZE7']].sum(1) / taz_in['TOTHH_T']).fillna(0))",,,Share of 2-worker HHs compared to share of HHs by size
TAZ_HH_wrk3_share,2,taz_in,,Logical,Test,"all((taz_in['HHWORK3'] / taz_in['TOTHH_T']).fillna(0) <= (taz_in[['HHSIZE3', 'HHSIZE4', 'HHSIZE5', 'HHSIZE6', 'HHSIZE7']].sum(1) / taz_in['TOTHH_T']).fillna(0))",,,Share of 3p-worker HHs compared to share of HHs by size
TAZ_HH_by_size,2,taz_in,,Logical,Test,"all(taz_in['TOTHH_T'] == taz_in[['CATINC1', 'CATINC2', 'CATINC3']].sum(1))",,,Total HHs = HH by Income
TAZ_Emp_cat,2,taz_in,,Logical,Test,"all(taz_in[['AgforF', 'MiningF', 'UtilF', 'ConstrF', 'ManufF', 'WhlsaleF', 'RetailF', 'TrawhseF', 'InfoF', 'FininsF', 'EduK12', 'EduHigh', 'EduOthers', 'RealestF', 'ProftechF', 'MgmtF', 'WastadmnF', 'HealthF', 'ArtsentF', 'FoodlodgF', 'OtherF', 'PublicF']].sum(1) == taz_in['TotEmp'])",,,Employment by type same as total employment
TAZ_TE_10pct,2,taz_in,,Warning,Test,"taz_in[taz_in['State'] == 'Idaho']['TotEmp'].sum() * 0.9 < taz_in[taz_in['State'] == 'Idaho']['HHWORK1'].sum() + 2 * taz_in[taz_in['State'] == 'Idaho']['HHWORK2'].sum() + 3 * taz_in[taz_in['State'] == 'Idaho']['HHWORK3'].sum() < taz_in[taz_in['State'] == 'Idaho']['TotEmp'].sum() * 1.1",,,Total employment is +/- 10% compared to implied number of workers (households * workers per household) at a statewide level
County_pop_age,2,county_in,,Logical,Test,"all(county_in[['AGE1', 'AGE2', 'AGE3', 'AGE4', 'AGE5', 'AGE6', 'AGE7', 'AGE8', 'AGE9', 'AGE10', 'AGE11', 'AGE12']].sum(1) == county_in['CTYPOP'])",,,County data County Population is equal to County Population by age group
# Group 3: Post-Populationsim Checks (population),,,,,,,,,
PERSON_Fields_Availability,3,persons,PERS_ID,Fatal,Test,test_val in persons.columns,"HH_ID,PERS_ID,STDM_TAZ,SEX,AGE,SCHOOL,RLABOR,INDUSTRY,OCCUP,SW_UNSPLIT_IND,SW_OCCUP,SW_SPLIT_IND,WORK_OCC",,Check if person file contains all the required fields for ABM
Household_Fields_Availability,3,households,HH_ID,Fatal,Test,test_val in households.columns,"HH_ID,PERSONS,STDM_TAZ,UNITS1,AUTOS,RHHINC,Azone",,
HH_persons_valueCheck,3,households,HH_ID,Fatal,Test,"persons.groupby('HH_ID').agg(np = ('HH_ID', 'count')).join((households.set_index('HH_ID'))['PERSONS']).query('np == PERSONS').shape[0] > 0",,,Check if HH persons disagrees with number of persons by HH
County_hh_taz,3,households,,Warning,Test,"all(households.groupby('STDM_TAZ').agg(hh_per = ('PERSONS', 'sum')).merge(taz_in[['STDM_TAZ', 'County', 'TOTPOP_T']], how = 'left', on = 'STDM_TAZ').groupby('County').agg(hh_per = ('hh_per', 'sum'), tazin_per = ('TOTPOP_T', 'sum')).assign(low = lambda x: 0.9 * x['tazin_per'], high = lambda x: 1.1 * x['tazin_per'], test = lambda x: (x['low'] < x['hh_per']) & (x['hh_per'] < x['high']))['test'])",,,HHs within 10%
County_hh_size,3,county_in,,Logical,Test,"(0.9 * county_in[(county_in['CNTYIDFP00']/1000).astype(int) == 16]['CTYPOP'].sum()) < households[households['STDM_TAZ'].isin(taz_in[taz_in['State'] == 'Idaho']['STDM_TAZ'])]['PERSONS'].sum() < (1.1 * county_in[(county_in['CNTYIDFP00']/1000).astype(int) == 16]['CTYPOP'].sum())",,,Sum of households * household size is +/- 10% of population at county level
HH_atleast,3,households,HH_ID,Fatal,Test,"all(households['PERSONS']>0)",,,Households have at least one person
HH_tazin_match,3,taz_in,,Logical,Test,"households.shape[0] == taz_in['TOTHH_T'].sum()",,,Number of households in synthetic population matches TAZ summary file total households field
PER_tazin_match,3,taz_in,,Logical,Test,"0.9 * taz_in['TOTPOP_T'].sum() < persons.shape[0] < 1.1 * taz_in['TOTPOP_T'].sum()",,,Number of people in synthetic population +/- 10% of TAZ summary file total persons field
PER_sex,3,persons,,Logical,Test,"all(persons.SEX.isin([0, 1]))",,,Sex of persons must be either 0 or 1
PER_age0,3,persons,,Logical,Test,"any(persons.AGE == 0)",,,Persons age = 0
PER_School_valid,3,persons,,Logical,Test,"all(persons.SCHOOL.isin([-9, 1, 2, 3]))",,,"Person school code must be 1, 2, 3, or -9"
PER_RLABOR_valid,3,persons,,Logical,Test,"all(persons.RLABOR.isin([0, 1, 2, 3, 4, 5, 6]))",,,Person employment status (RLABOR) must be 0-6
PER_RLABOR_WORKOCC_Agree,3,persons,,Fatal,Test,"all(((persons.RLABOR.isin([1, 2, 4, 5])) & (persons.WORK_OCC > 0)) | ((persons.RLABOR.isin([0, 3, 6])) & (persons.WORK_OCC == 0)))",,,Person RLABOR and WORK_OCC must agree
HH_Autos_gt0,3,households,,Fatal,Test,"all(households.AUTOS >= 0)",,,Household number of autos at least 0
HH_Autos_valid,3,households,,Fatal,Test,"all(households.AUTOS.isin([0, 1, 2, 3, 4, 5, 6, 7]))",,,Household number of autos valid (1-7)
TAZ_Net_consist,3,check_skim,,Fatal,Test,"check_skim[(check_skim['I'].isin(taz_in['STDM_TAZ'])) & (check_skim['J1'].isin(taz_in['STDM_TAZ'])) & (check_skim['V1'] < 0)].shape[0] == 0",,,Consistency between network zones and input TAZ input file - (All zones in the network are represented in the TAZ input file and vice-versa)
HH_Net_consist,3,households,,Fatal,Test,"check_skim[(check_skim['I'].isin(households['STDM_TAZ'])) & (check_skim['J1'].isin(households['STDM_TAZ'])) & (check_skim['V1'] < 0)].shape[0] == 0",,,Consistency between the synthetic households and TAZ input file - (All household zones are represented in the TAZ input file)
# Group 3: Post-Populationsim Checks (network),,,,,,,,,
#Network_Skim,3
Network_FFSpeed,3,input_net,,Fatal,Test,"all(input_net.SPEED >= 5)",,,Ensure FF Speed is valid
Network_Lanes,3,input_net,,Fatal,Test,"all(input_net.LANES > 0)",,,Ensure all links have lanes
Network_Types,3,input_net,,Fatal,Test,"all(input_net.TYP.isin(['Expressway', 'Highway', 'Freeway', 'Principal Arterial', 'Minor Arterial', 'Collector', 'Local', 'Ramp', 'Centroid']))",,,Ensure all links have a valid type code

